using System.Numerics;
using Content.Shared._Shitmed.Targeting;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._Shitmed.UserInterface.Targeting.Controls;

/*
           { TargetBodyPart.Head, _control.HeadButton },
            { TargetBodyPart.Torso, _control.ChestButton },
            { TargetBodyPart.Groin, _control.GroinButton },
            { TargetBodyPart.LeftArm, _control.LeftArmButton },
            { TargetBodyPart.LeftHand, _control.LeftHandButton },
            { TargetBodyPart.RightArm, _control.RightArmButton },
            { TargetBodyPart.RightHand, _control.RightHandButton },
            { TargetBodyPart.LeftLeg, _control.LeftLegButton },
            { TargetBodyPart.LeftFoot, _control.LeftFootButton },
            { TargetBodyPart.RightLeg, _control.RightLegButton },
            { TargetBodyPart.RightFoot, _control.RightFootButton },
*/

[GenerateTypedNameReferences]
public sealed partial class SuccubusControl : TextureRect
{

    public Dictionary<TargetBodyPart, Texture?>? BodyPartTextures;
    public Dictionary<TargetBodyPart, Texture?>? BodyPartTexturesHovered;
    public Texture? TextureHovered;
    public Texture? TextureFocused;

    public Color HoverColor = Color.FromHex("#E700F6");

    public float DrawScale = 3; // By default it should be 2

    public SuccubusControl()
    {
        RobustXamlLoader.Load(this);
    }
    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (BodyPartTextures != null)
        {
            // Normal texture
            foreach (var item in BodyPartTextures)
            {
                if (item.Value != null)
                {
                    DrawTexture(handle, item.Value);
                }
            }
        }

        // Draw hovered
        if (TextureHovered != null)
            DrawTexture(handle, TextureHovered, HoverColor);

        // Draw hovered
        if (TextureFocused != null)
            DrawTexture(handle, TextureFocused);
    }

    public void DrawTexture(DrawingHandleScreen handle, Texture tex, Color? color = null)
    {
        var texSize = new Vector2((tex.Width * DrawScale) * UIScale, (tex.Height * DrawScale) * UIScale);
        var offset = texSize / 3;

        handle.DrawTextureRect(tex, new UIBox2(Vector2.Zero - offset, texSize - offset), color);
    }
}
