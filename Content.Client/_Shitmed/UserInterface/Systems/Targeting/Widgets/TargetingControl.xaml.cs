using System.Linq;
using System.Numerics;
using Content.Client.Stylesheets;
using Content.Shared._Shitmed.Targeting;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using Content.Client._Shitmed.UserInterface.Systems.PartStatus;
using Content.Client._Shitmed.UserInterface.Systems.Targeting.Controls;

namespace Content.Client._Shitmed.UserInterface.Systems.Targeting.Widgets;

//SuccubusDoll
//GargoyleDoll

[GenerateTypedNameReferences]
public sealed partial class TargetingControl : UIWidget
{
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    private readonly TargetingUIController _controller;
    private readonly PartStatusUIController _partStatusController;
    private readonly Dictionary<TargetBodyPart, TextureButton> _bodyPartControls;
    private AlienControl _control;

    public TargetingControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _controller = UserInterfaceManager.GetUIController<TargetingUIController>();
        _partStatusController = UserInterfaceManager.GetUIController<PartStatusUIController>();

        _control = new AlienControl();
        _control.SetSize = new Vector2(64, 128);
        _control.Stretch = TextureRect.StretchMode.KeepAspectCentered;
        Panel.AddChild(_control);

        _bodyPartControls = new Dictionary<TargetBodyPart, TextureButton>
        {
            // TODO: ADD EYE AND MOUTH TARGETING
            { TargetBodyPart.Head, _control.HeadButton },
            { TargetBodyPart.Torso, _control.ChestButton },
            { TargetBodyPart.Groin, _control.GroinButton },
            { TargetBodyPart.LeftArm, _control.LeftArmButton },
            { TargetBodyPart.LeftHand, _control.LeftHandButton },
            { TargetBodyPart.RightArm, _control.RightArmButton },
            { TargetBodyPart.RightHand, _control.RightHandButton },
            { TargetBodyPart.LeftLeg, _control.LeftLegButton },
            { TargetBodyPart.LeftFoot, _control.LeftFootButton },
            { TargetBodyPart.RightLeg, _control.RightLegButton },
            { TargetBodyPart.RightFoot, _control.RightFootButton },
        };

        // Initialize textures
        LoadHoverTextures();

        foreach (var bodyPartButton in _bodyPartControls)
        {
            bodyPartButton.Value.MouseFilter = MouseFilterMode.Stop;
            bodyPartButton.Value.OnPressed += _ => SetActiveBodyPart(bodyPartButton.Key);
            bodyPartButton.Value.OnMouseEntered += _ =>
            {
                if (_control.BodyPartTexturesHovered != null)
                    _control.TextureFocused = _control.BodyPartTexturesHovered[bodyPartButton.Key];
            };
            bodyPartButton.Value.OnMouseExited += _ =>
            {
                if (_control.BodyPartTexturesHovered != null)
                    _control.TextureFocused = null;
            };

            TargetDoll.Texture = Theme.ResolveTexture("target_doll");
        }
    }

    private void LoadHoverTextures()
    {
        /*
        _control.BodyPartTexturesHovered = new Dictionary<TargetBodyPart, Texture?>();
        foreach (var item in _bodyPartControls)
        {
            string enumName = Enum.GetName(typeof(TargetBodyPart), item.Key) ?? "Unknown";
            var texture = _resourceCache.GetResource<TextureResource>($"/Textures/Interface/Targeting/SuccubusDoll/{enumName.ToLowerInvariant()}_hover.png");
            _control.BodyPartTexturesHovered[item.Key] = texture;
        }
        */

        _control.BodyPartTexturesHovered = new Dictionary<TargetBodyPart, Texture?>();
        foreach (var item in _bodyPartControls)
        {
            string enumName = Enum.GetName(typeof(TargetBodyPart), item.Key) ?? "Unknown";
            var texture = Theme.ResolveTexture($"target_{enumName.ToLowerInvariant()}_hover.png");
            _control.BodyPartTexturesHovered[item.Key] = texture;
        }
    }

    /// <summary>
    /// Sets visual of body part damage.
    /// For now it's unused, because we only render doll background and targeted body.
    /// Information about body status should be checked from health alert.
    /// </summary>
    /// <param name="state"></param>
    public void SetTextures(Dictionary<TargetBodyPart, TargetIntegrity> state)
    {
        /*
        if (_control.BodyPartTextures == null)
            return;

        foreach (var (bodyPart, integrity) in state)
        {
            //_resourceCache.GetResource<TextureResource>
            //$"{enumName.ToLowerInvariant()}_{enumValue}"
            string enumName = Enum.GetName(typeof(TargetBodyPart), bodyPart) ?? "Unknown";
            int enumValue = (int) integrity;
            //var texture = new Texture(new ResPath($"/Textures/Interface/Targeting/Status/{enumName.ToLowerInvariant()}.rsi"));
            //var texture = $"/Textures/Interface/Targeting/SuccubusDoll/{enumName}/{enumName.ToLowerInvariant()}_{enumValue}.png";
            var texture = _resourceCache.GetResource<TextureResource>($"/Textures/Interface/Targeting/SuccubusDoll/{enumName.ToLowerInvariant()}.png");
            var damageTexture = _resourceCache.GetResource<TextureResource>($"/Textures/Interface/Targeting/SuccubusDoll/{enumName.ToLowerInvariant()}_damage.png");
            _control.BodyPartTextures[bodyPart] = texture;
            //if (rectParent == null)
            //    continue;
            //rectParent.TexturePath = texture;
        }
        */
    }

    private void SetActiveBodyPart(TargetBodyPart bodyPart) => _controller.CycleTarget(bodyPart);

    public void SetBodyPartsVisible(TargetBodyPart bodyPart)
    {
        if (_control.BodyPartTexturesHovered == null)
            return;

        foreach (var item in _control.BodyPartTexturesHovered)
        {
            if (item.Key == bodyPart)
                _control.TextureHovered = item.Value;
        }
    }

    protected override void OnThemeUpdated() => TargetDoll.Texture = Theme.ResolveTexture("target_doll");

    public void SetTargetDollVisible(bool visible) => Visible = visible;

}
